{
  "gpu_detection": {
    "description": "Detect if Nvidia GPU is available",
    "code_snippet": "import subprocess\ntry:\n    result = subprocess.run(['nvidia-smi'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    gpu_available = result.returncode == 0\nexcept:\n    gpu_available = False"
  },
  "frameworks": {
    "sklearn_logistic_regression": {
      "import": "from sklearn.linear_model import LogisticRegression",
      "baseline_params": {
        "max_iter": 1000,
        "random_state": 42
      },
      "tuning_param_grid": {
        "C": [0.001, 0.01, 0.1, 1, 10, 100],
        "solver": ["lbfgs", "liblinear", "saga"],
        "max_iter": [500, 1000, 2000]
      },
      "gpu_support": false
    },
    "sklearn_random_forest": {
      "import": "from sklearn.ensemble import RandomForestClassifier",
      "baseline_params": {
        "n_estimators": 100,
        "random_state": 42
      },
      "tuning_param_grid": {
        "n_estimators": [50, 100, 200, 300],
        "max_depth": [5, 10, 20, null],
        "min_samples_split": [2, 5, 10],
        "min_samples_leaf": [1, 2, 4]
      },
      "gpu_support": false
    },
    "xgboost": {
      "import": "from xgboost import XGBClassifier",
      "baseline_params": {
        "n_estimators": 100,
        "random_state": 42,
        "eval_metric": "logloss"
      },
      "baseline_params_gpu": {
        "n_estimators": 100,
        "random_state": 42,
        "eval_metric": "logloss",
        "tree_method": "gpu_hist",
        "predictor": "gpu_predictor"
      },
      "tuning_param_grid": {
        "n_estimators": [50, 100, 200, 300],
        "max_depth": [3, 5, 7, 10],
        "learning_rate": [0.01, 0.05, 0.1, 0.3],
        "subsample": [0.6, 0.8, 1.0],
        "colsample_bytree": [0.6, 0.8, 1.0]
      },
      "gpu_support": true
    },
    "lightgbm": {
      "import": "from lightgbm import LGBMClassifier",
      "baseline_params": {
        "n_estimators": 100,
        "random_state": 42,
        "verbose": -1
      },
      "baseline_params_gpu": {
        "n_estimators": 100,
        "random_state": 42,
        "verbose": -1,
        "device": "gpu"
      },
      "tuning_param_grid": {
        "n_estimators": [50, 100, 200, 300],
        "max_depth": [3, 5, 7, 10],
        "learning_rate": [0.01, 0.05, 0.1, 0.3],
        "num_leaves": [15, 31, 63, 127],
        "min_child_samples": [5, 10, 20]
      },
      "gpu_support": true
    },
    "tensorflow": {
      "import": "import tensorflow as tf\nfrom tensorflow import keras",
      "baseline_architecture": {
        "layer1_units": 64,
        "layer2_units": 32,
        "dropout": 0.3,
        "optimizer": "adam",
        "loss": "sparse_categorical_crossentropy"
      },
      "tuning_param_grid": {
        "layer1_units": [32, 64, 128],
        "layer2_units": [16, 32, 64],
        "dropout": [0.2, 0.3, 0.5],
        "learning_rate": [0.001, 0.01, 0.1],
        "batch_size": [16, 32, 64]
      },
      "gpu_support": true,
      "auto_gpu": true
    },
    "pytorch": {
      "import": "import torch\nimport torch.nn as nn",
      "baseline_architecture": {
        "layer1_units": 64,
        "layer2_units": 32,
        "dropout": 0.3,
        "optimizer": "adam",
        "learning_rate": 0.001
      },
      "tuning_param_grid": {
        "layer1_units": [32, 64, 128],
        "layer2_units": [16, 32, 64],
        "dropout": [0.2, 0.3, 0.5],
        "learning_rate": [0.001, 0.01, 0.1],
        "epochs": [50, 100, 200]
      },
      "gpu_support": true,
      "auto_gpu": true
    },
    "statsmodels": {
      "import": "import statsmodels.api as sm",
      "baseline_params": {},
      "use_case": "regression",
      "gpu_support": false
    }
  },
  "standardized_metrics": {
    "classification": [
      "accuracy",
      "precision",
      "recall",
      "f1_score",
      "roc_auc",
      "log_loss"
    ],
    "regression": [
      "mse",
      "rmse",
      "mae",
      "r2_score",
      "mape"
    ],
    "common": [
      "training_time",
      "inference_time_ms",
      "model_size_mb",
      "gpu_used"
    ]
  },
  "metric_functions": {
    "classification": {
      "accuracy": "sklearn.metrics.accuracy_score",
      "precision": "sklearn.metrics.precision_score",
      "recall": "sklearn.metrics.recall_score",
      "f1_score": "sklearn.metrics.f1_score",
      "roc_auc": "sklearn.metrics.roc_auc_score",
      "log_loss": "sklearn.metrics.log_loss"
    },
    "regression": {
      "mse": "sklearn.metrics.mean_squared_error",
      "rmse": "sklearn.metrics.mean_squared_error (squared=False)",
      "mae": "sklearn.metrics.mean_absolute_error",
      "r2_score": "sklearn.metrics.r2_score",
      "mape": "custom: np.mean(np.abs((y_true - y_pred) / np.clip(y_true, 1e-10, None))) * 100"
    }
  },
  "mlflow_integration": {
    "experiment_naming": {
      "data_experiments": "{project_name}_data",
      "model_experiments": "{project_name}_model"
    },
    "run_naming_conventions": {
      "baseline": "{framework}_baseline",
      "tuning_parent": "{framework}_tuning_parent",
      "tuning_child": "{framework}_params_{param_summary}"
    },
    "artifact_logging": [
      "model",
      "confusion_matrix.png",
      "roc_curve.png",
      "feature_importance.png",
      "metrics.json"
    ],
    "dual_storage": {
      "description": "All artifacts must be saved to BOTH MLflow and /mnt/artifacts/",
      "mlflow_path": "logged as artifacts to runs",
      "file_path": "/mnt/artifacts/epoch{XXX}/"
    }
  },
  "model_registry": {
    "stages": {
      "None": "Initial registration in Epoch 005",
      "Staging": "After passing Epoch 006 tests",
      "Production": "After successful Epoch 007 deployment",
      "Archived": "Previous versions when new model promoted"
    },
    "required_tags": [
      "epoch",
      "model_type",
      "training_date",
      "data_version"
    ]
  },
  "streamlit_styling": {
    "colors": {
      "table_bg": "#BAD2DE",
      "view_bg": "#CBE2DA",
      "mv_bg": "#E5F0EC",
      "text_color": "rgb(90, 90, 90)"
    },
    "layout": {
      "page_config": "wide",
      "column_count": 3
    },
    "semantic_ui_cdn": "https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css",
    "caching_decorators": [
      "@st.experimental_singleton",
      "@st.experimental_memo"
    ]
  },
  "resource_limits": {
    "max_file_size_mb": 50,
    "max_ram_gb": 12,
    "chunk_size_rows": 10000,
    "checkpoint_frequency_percent": 10,
    "checkpoint_frequency_minutes": 5
  },
  "data_formats": {
    "preferred": "parquet",
    "reasons": [
      "Columnar storage",
      "Efficient compression",
      "Fast read/write",
      "Schema preservation"
    ]
  }
}
